"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9926],{2684:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>d});var a=i(4848),o=i(8453);const t={},s="Main Config",r={id:"guilds/configuration/main-config",title:"Main Config",description:"File location",source:"@site/docs/guilds/configuration/main-config.md",sourceDirName:"guilds/configuration",slug:"/guilds/configuration/main-config",permalink:"/guilds/configuration/main-config",draft:!1,unlisted:!1,editUrl:"https://github.com/PixelStudiosDev/pixelstudiosdev.github.io/edit/master/docs/guilds/configuration/main-config.md",tags:[],version:"current",lastUpdatedAt:1719605667e3,frontMatter:{},sidebar:"guilds",previous:{title:"Levels Config",permalink:"/guilds/configuration/levels-config"},next:{title:"Menu Config",permalink:"/guilds/configuration/menu-config"}},l={},d=[{value:"File location",id:"file-location",level:2},{value:"Editing the file",id:"editing-the-file",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"main-config",children:"Main Config"}),"\n",(0,a.jsx)(e.h2,{id:"file-location",children:"File location"}),"\n",(0,a.jsxs)(e.p,{children:["The main configuration file is located in ",(0,a.jsx)(e.code,{children:"plugins/Guilds/config.yml"}),"."]}),"\n",(0,a.jsx)(e.h2,{id:"editing-the-file",children:"Editing the file"}),"\n",(0,a.jsx)(e.p,{children:"Here you can find all the information regarding the configuration of the file:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",metastring:'title="config.yml"',children:"# Guilds v1.2.0-BETA-4 made by [itz_leoo].\n# Dependencies: [].\n# SoftDependencies: [BedWars1058, BedWarsProxy, PlaceholderAPI, Vault].\n# Read the wiki for more info: https://wiki.pixelstudios.dev/guilds\n# Join my discord for support: https://pixelstudios.dev/discord\n\n#Database settings\nmysql:\n  # Database type: mysql, sqlite, mongodb\n  type: mongodb\n  host: localhost\n  port: 3306\n  name: guilds\n  username: root\n  password: ''\n  ssl: true\n\n#Redis settings\n#You can leave empty username/password if you don't have it\nredis:\n  host: localhost\n  port: 6379\n  username: ''\n  password: ''\n\nguilds:\n  settings:\n    #Bungeecord settings\n    bungeecord:\n      #True if you are running the plugin on multiple servers\n      enabled: false\n      #Refresh rate in seconds of data between servers\n      refresh: 10\n      #Delay in milli seconds from the player's join in the server and the sending of the join message\n      join-delay: 50\n\n    #True for printing in console of the plugin database actions and other things    \n    debug: false\n\n    guild-players:\n      #Max members in a guild\n      max-members: 125\n\n      #Symbol shown in members list message\n      online-offline-symbol: \u25cf\n\n    guild-name:\n      #Max characters allowed in a guild name \n      max-name-length: 10\n\n      #Allow characters in the guild name\n      #It's a regex pattern, don't modify it unless you know how it works\n      #By default: alphabet letters, numbers and these chars \u2727 \u272a \u2716 \u2713 \u273f \u270c \u2764\n      chars: ^[a-zA-Z0-9\u2727\u272a\u2716\u2713\u273f\u270c\u2764]*$\n\n    guild-tag:\n      #Tag Placeholder format\n      #You can use internal placeholders\n      format: '{tag_color}[{tag}]'\n      \n      #True to make uppercase all Guilds Tag\n      #Example: [tag] -> [TAG]\n      uppercase: false\n      \n      #Default max Guild Tag Length\n      default-max-length: 6\n\n      #Tag colors of guild tag based on level\n      #Colors: GRAY, DARK_AQUA, DARK_GREEN, YELLOW, ORANGE, DARK_RED, RED, GREEN, AQUA, DARK_BLUE, BLUE, LIGHT_PURPLE, DARK_PURPLE, WHITE, DARK_GRAY, BLACK\n      #Format: colorValue:&colorNumber:colorDisplayName\n      tag:\n        - GRAY:&7:Gray\n        - DARK_AQUA:&3:Dark Acqua\n        - DARK_GREEN:&2:Dark Green\n        - YELLOW:&e:Yellow\n        - 45-other:&e-YELLOW:&e-Yellow\n\n    guild-rank-tag:\n      #Guild's Rank Tag Format\n      #You can use internal placeholders\n      format: '{rankTagColor}[{rankTag}]'\n\n    guild-level:\n      #Command executed on these events\n      #The events are based on the hook plugins\n      kill-reward: guild addxp {guild} 10\n      final-kill-reward: guild addxp {guild} 20\n      bed-destroy-reward: guild addxp {guild} 15\n      win-reward: guild addxp {guild} 200\n        \n    progress-bar:\n      #Bar character\n      char: '|'\n\n      #Bar characters count\n      chars-count: 40\n      \n      #Bar character unlocked color\n      locked-color: '&7'\n\n      #Bar character locked color\n      unlocked-color: '&6'\n      \n    guild-time:\n      #Guild time format\n      #Check https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html\n      format: yyyy-MM-dd HH:mm z\n      \n    guild-invite:\n      #Time of guild invite expire in minutes\n      time-in-minutes: 1\n      \n    guild-party:\n      #Command executed on /guild party command\n      party-command: party invite {player}\n      \n    guild-chat:\n      #Chat cooldown time\n      mute-time: 10\n\n      #Player with guilds admin permission can see all guilds chat messages\n      admin-spy:\n        #Enable admin spy\n        enabled: true\n      \n  permissions:\n    #Permission for creating a guild\n    create: guilds.create\n\n    #Permission for joining a guild\n    join: ''\n\n    #Permission for getting access to admin features\n    admin: guilds.admin\n\n    #Permission to receive the orange guild tag\n    orange-tag: guilds.mvp++\n"})})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>r});var a=i(6540);const o={},t=a.createContext(o);function s(n){const e=a.useContext(t);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),a.createElement(t.Provider,{value:e},n.children)}}}]);