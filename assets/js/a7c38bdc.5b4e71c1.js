"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[11],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var l=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,l,i=function(e,t){if(null==e)return{};var n,l,i={},a=Object.keys(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=l.createContext({}),o=function(e){var t=l.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=o(e.components);return l.createElement(u.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},v=l.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),p=o(n),v=i,c=p["".concat(u,".").concat(v)]||p[v]||m[v]||a;return n?l.createElement(c,r(r({ref:t},s),{},{components:n})):l.createElement(c,r({ref:t},s))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=v;var d={};for(var u in t)hasOwnProperty.call(t,u)&&(d[u]=t[u]);d.originalType=e,d[p]="string"==typeof e?e:i,r[1]=d;for(var o=2;o<a;o++)r[o]=n[o];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}v.displayName="MDXCreateElement"},3813:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>d,toc:()=>o});var l=n(7462),i=(n(7294),n(3905));const a={},r="Working with Guilds Events",d={unversionedId:"guilds/developer-api/guilds-events",id:"guilds/developer-api/guilds-events",title:"Working with Guilds Events",description:"- Guilds provides a set of events that you can use to listen to guild-related actions.",source:"@site/docs/guilds/developer-api/guilds-events.md",sourceDirName:"guilds/developer-api",slug:"/guilds/developer-api/guilds-events",permalink:"/guilds/developer-api/guilds-events",draft:!1,editUrl:"https://github.com/PixelStudiosDev/pixelstudiosdev.github.io/edit/master/docs/guilds/developer-api/guilds-events.md",tags:[],version:"current",lastUpdatedAt:1715791483,formattedLastUpdatedAt:"May 15, 2024",frontMatter:{},sidebar:"guilds",previous:{title:"Working with Guilds API",permalink:"/guilds/developer-api/guilds-api"}},u={},o=[{value:"Guilds",id:"guilds",level:3},{value:"Guild Level",id:"guild-level",level:3},{value:"Guild Player",id:"guild-player",level:3},{value:"Guild Rank",id:"guild-rank",level:3}],s={toc:o},p="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,l.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"working-with-guilds-events"},"Working with Guilds Events"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Guilds provides a set of events that you can use to listen to guild-related actions."),(0,i.kt)("li",{parentName:"ul"},"The events are related to guilds, levels, members and ranks.")),(0,i.kt)("h1",{id:"guilds-events-list"},"Guilds Events List"),(0,i.kt)("h3",{id:"guilds"},"Guilds"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"GuildCreateEvent and GuildDeleteEvent events cannot be cancelled.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GuildCreateEvent"),": Called when a guild is created."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GuildDeleteEvent"),": Called when a guild is deleted."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GuildRenameEvent"),": Called when a guild is renamed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GuildTagEvent"),": Called when a guild's tag is changed.")),(0,i.kt)("h3",{id:"guild-level"},"Guild Level"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GuildLevelChangeEvent"),": Called when the guild's level changes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GuildXpChangeEvent"),": Called when the guild's xp changes.")),(0,i.kt)("h3",{id:"guild-player"},"Guild Player"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GuildDemoteEvent"),": Called when a player is demoted in the guild."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GuildJoinEvent"),": Called when a player joins a guild."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GuildKickEvent"),": Called when a player is kicked from the guild."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GuildLeaveEvent"),": Called when a player leaves a guild."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GuildMuteEvent"),": Called when a player is muted in the guild."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GuildPromoteEvent"),": Called when a player is promoted in the guild."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GuildTransferEvent"),": Called when the guild is transferred to another player."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GuildUnmuteEvent"),": Called when a player is unmuted in the guild.")),(0,i.kt)("h3",{id:"guild-rank"},"Guild Rank"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GuildRankCreateEvent"),": Called when a rank is created in the guild."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GuildRankDeleteEvent"),": Called when a rank is deleted in the guild."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GuildRankPermissionEvent"),": Called when a rank's permission is changed in the guild."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GuildRankRenameEvent"),": Called when a rank is renamed in the guild."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GuildRankTagEvent"),": Called when a rank's tag is changed in the guild.")),(0,i.kt)("h1",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="ExampleListener.java"',title:'"ExampleListener.java"'},'//Code to cancel the GuildTransferEvent if the new leader is not online.\n\n@EventHandler\npublic void onGuildTransfer(GuildTransferEvent event) {\n    Guild guild = event.getGuild();\n    GuildPlayer oldLeader = event.getOldLeader();\n    GuildPlayer newLeader = event.getNewLeader();\n\n    if (newLeader.getOnlinePlayer() == null) {\n        oldLeader.sendMessage("\xa7cThe new leader is not online.");\n\n        event.setCancelled(true);\n        return;\n    }\n}\n')))}m.isMDXComponent=!0}}]);